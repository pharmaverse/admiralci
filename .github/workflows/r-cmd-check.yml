on:
  workflow_dispatch:
  workflow_call:
    inputs:
      error-on:
        description: Input for the 'error_on' parameter in rcmdcheck::rcmdcheck()
        required: false
        default: note
        type: string
  push:
    branches:
      - main
      - devel
  pull_request:
    branches:
      - main
      - devel

name: R CMD Check

concurrency:
  group: r-cmd-check-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  R-CMD-check:
    runs-on: ubuntu-latest
    container:
      image: "ghcr.io/pharmaverse/admiralci-${{ matrix.r_version }}:latest"
    name: (${{ matrix.r_version }})
    if: >
      !contains(github.event.commits[0].message, '[skip r-cmd-check]')
    strategy:
      fail-fast: false
      matrix:
        r_version: ['release', 'devel', 'oldrel']

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: true
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_REPOS: "https://cran.r-project.org"

    steps:
      ##################### BEGIN boilerplate steps #####################
      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v5.4

      - name: Checkout repo (PR) ðŸ›Ž
        uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ steps.branch-name.outputs.head_ref_branch }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Checkout repository
        uses: actions/checkout@v3
        if: github.event_name != 'pull_request'
        with:
          ref: ${{ steps.branch-name.outputs.head_ref_branch }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.staged.dependencies
          key: staged-deps

      - name: Run Staged dependencies
        uses: insightsengineering/staged-dependencies-action@v1
        with:
          run-system-dependencies: false
          renv-restore: false
          enable-check: false
          cran-repos: "$R_REPOS"
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies from DESCRIPTION
        run: |
          devtools::install(force = TRUE, dependencies = TRUE)
        shell: Rscript {0}

      ##################### END boilerplate steps #####################

      - name: Upload dependencies artifact
        run: |
          installed_packages <- as.data.frame(installed.packages())
          write.csv(installed_packages, "/workspace/deps-${{ matrix.r_version }}.csv", row.names = FALSE)
        shell: Rscript {0}

      - name: Upload deps.csv artifact
        uses: actions/upload-artifact@v2
        with:
          name: deps
          path: "/workspace/deps.csv"

      - name: Check Version
        id: check_version
        run: |
          maintenance_version="F"
          description_dat <- readLines("DESCRIPTION")
          for (i in seq_along(description_dat)) {
            if (grepl("^Version:", description_dat[i])) {
              current_version <- sub("^Version: ", "", description_dat[i])
              version_parts <- strsplit(current_version, "\\.")[[1]]
              # check if maintenance version
              if (length(version_parts) == 4) {
                print("Maintenance version detected (format X.Y.Z.M with M >= 9000)")
                maintenance_version="T"
              }
            }
          }
          cat(sprintf("maintenance_version=%s", maintenance_version), file = Sys.getenv("GITHUB_OUTPUT"), append = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          _R_CHECK_FORCE_SUGGESTS_: false
        run: |
          if ("${{steps.check_version.outputs.maintenance_version}}" == "T"){
            Sys.setenv("_R_CHECK_CRAN_INCOMING_SKIP_LARGE_VERSION_" = TRUE)
          }
          if (!requireNamespace("rcmdcheck", quietly = TRUE)) install.packages("rcmdcheck")
          options(crayon.enabled = TRUE)
          check_error_on <- "${{ inputs.error-on }}"
          if (check_error_on == "") {
            check_error_on <- "note"
          }
          rcmdcheck::rcmdcheck(
            args = c("--no-manual", "--as-cran"),
            error_on = check_error_on,
            check_dir = "check"
          )
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: r${{ matrix.r_version }}-results
          path: check