on:
  workflow_dispatch:
  workflow_call:
    inputs:
      r-version:
        description: 'The version of R to use'
        default: '3.6'
        required: false
        type: string
  push:
    branches:
      - main
      - devel
      - pre-release
  pull_request:
    branches:
      - main
      - devel
      - pre-release

name: Check Templates

concurrency:
  group: templates-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check_templates:
    name: Verify
    if: >
      !contains(github.event.commits[0].message, '[skip check_templates]')
    runs-on: ubuntu-20.04
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      ##################### BEGIN boilerplate steps #####################
      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v5.4

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch-name.outputs.head_ref_branch }}
          fetch-depth: 0

      - name: Normalize inputs
        id: normalizer
        run: |
          function remove_substring() {
              echo "${1//$2}"
          }
          BRANCH=${{ steps.branch-name.outputs.head_ref_branch }}
          if [ "${BRANCH}" == "" ]
          then {
            BRANCH=$(git name-rev HEAD | awk '{print $NF}')
          }
          fi
          if [[ $BRANCH == remotes/pull/* ]]
          then {
            PR=$(remove_substring "$BRANCH" "/merge")
            PR=$(remove_substring "$PR" "remotes/")
            PR=$(echo $PR | sed 's/pull/pulls/')
            echo "Accessing repos/${GITHUB_REPOSITORY}/${PR}"
            BRANCH=$(gh api -X GET repos/${GITHUB_REPOSITORY}/${PR} | jq -r '.head.ref')
          }
          fi
          echo "BRANCH is $BRANCH"
          _R_VERSION="${{ inputs.r-version }}"
          R_VERSION=${_R_VERSION:-"3.6"}
          echo "::set-output name=R_VERSION::$R_VERSION"
          echo "::set-output name=SD_GIT_REF::$BRANCH"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ steps.normalizer.outputs.R_VERSION }}

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/renv
            ~/.staged.dependencies
          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
          restore-keys: ${{ runner.os }}-renv-

      - name: Run Staged dependencies
        uses: insightsengineering/staged-dependencies-action@v1
        with:
          run-system-dependencies: true
          enable-check: false
          git-ref: ${{ steps.normalizer.outputs.SD_GIT_REF }}
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      ##################### END boilerplate steps #####################

      - name: Install package
        run: renv::install(".")
        shell: Rscript {0}

      - name: Run Template Scripts
        run: |
          templates <- list.files(
            system.file("templates", package = "admiral"),
            full.names = TRUE
          )
          exit_codes <- purrr::map_chr(templates, function(file) {
            cmd <- sprintf("Rscript --vanilla %s", file)
            system(cmd)
          })
          if (any(exit_codes == 1L)) {
            failed_scripts <- basename(templates)[which(exit_codes == 1L)]
            err_msg <- sprintf(
              "Executing the following template scripts failed:\n%s",
              paste("-", failed_scripts, collapse = "\n")
            )
            stop(err_msg, call. = FALSE)
          }
        shell: Rscript {0}
